---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Logo from "../components/Logo.astro";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import Aside from "../components/Aside.astro";
import ResponsiveFv from "../components/ResponsiveFv.astro";
import GridRive from "../components/GridRive.astro";
import GridSvg from "../components/GridSvg.astro";
import gridText from "../data/gridText.json";
import SafeIcon from "../components/SafeIcon.astro";
import SwiperMenu from "../components/SwiperMenu.astro";
import { hrefLink } from "../scripts/constLinks";
import globalText from "../data/globalText.json";
import SwiperDisplay from "../components/SwiperDisplay.astro";
import { play, pause, reverse, restart } from "../scripts/constButton";
import AboutCat from "../assets/svg/aboutCat.svg";
import blogCat from "../assets/svg/blogCat.svg";
import sodenoura from "../assets/svg/sodenoura.svg";
import gaura from "../assets/svg/gauraStudio.svg";
import pikucha from "../assets/svg/pikucha.svg";
import sodenoura2 from "../assets/svg/sodenoura2.svg";
import gaura2 from "../assets/svg/gauraStudio2.svg";
import pikucha2 from "../assets/svg/pikucha2.svg";
import contactCat from "../assets/svg/contact_cat.svg";
import backgroundImageSrc from "../assets/background.webp";
import { getImage } from "astro:assets";

const backgroundImage = await getImage({ src: backgroundImageSrc });
const portfolioRiv = "/riv/my-portfolio.riv";
const welcomeRiv = "/riv/working-office.riv";
const webDesignerRiv = "/riv/designer-life.riv";
---

<Layout
  title={globalText.top.title}
  description={globalText.top.description}
  ogType={globalText.og.type}
  ogTitle={globalText.top.title}
  ogDescription={globalText.top.description}
  twitterTitle={globalText.top.title}
  twitterDescription={globalText.top.description}
>
  <div id="outer-container">
    <Header />
    <main id="page-wrap">
      <Logo />
      <div class="breadcrumbs__wrapper breadcrumbs__wrapper_top">
        <Breadcrumbs crumbs={[]} />
      </div>
      <div id="main-container" style={`background-image: url(${backgroundImage.src})`}>
        <ResponsiveFv />
        <aside class="toolbar">
          <Aside />
        </aside>
        <div id="js-grid" class="grid">
          <div class="wrapper">
            <ul id="js-grid__menu" class="grid__menu">
              <GridSvg
                className="item-1"
                href={hrefLink.about}
                ariaLabel={gridText.gridItem1.ariaLabel}
                ariaTitle={gridText.gridItem1.ariaTitle}
                imageSrc={AboutCat}
                imageMeta={gridText.gridItem1.Alt}
                tooltipText={gridText.gridItem1.tooltipText}
                tooltipPosition={gridText.gridItem1.tooltipPosition}
              />
              <GridSvg
                className="item-2"
                href={hrefLink.blog}
                ariaLabel={gridText.gridItem2.ariaLabel}
                ariaTitle={gridText.gridItem2.ariaTitle}
                imageSrc={blogCat}
                imageMeta={gridText.gridItem2.Alt}
                tooltipText={gridText.gridItem2.tooltipText}
                tooltipPosition={gridText.gridItem2.tooltipPosition}
              />
              <GridSvg
                className="item-3"
                href={hrefLink.contact}
                ariaLabel={gridText.gridItem3.ariaLabel}
                ariaTitle={gridText.gridItem3.ariaTitle}
                imageSrc={contactCat}
                imageMeta={gridText.gridItem3.Alt}
                stateMachines="State Machine 1"
                tooltipText={gridText.gridItem3.tooltipText}
                tooltipPosition={gridText.gridItem3.tooltipPosition}
              />
              <GridRive
                className="item-4"
                href={hrefLink.works}
                ariaLabel={gridText.gridItem4.ariaLabel}
                ariaTitle={gridText.gridItem4.ariaTitle}
                src={portfolioRiv}
                stateMachines="State Machine 1"
                tooltipText={gridText.gridItem4.tooltipText}
                tooltipPosition={gridText.gridItem4.tooltipPosition}
              />
              <GridRive
                className="item-5"
                href={hrefLink.home}
                ariaLabel={gridText.gridItem5.ariaLabel}
                ariaTitle={gridText.gridItem5.ariaTitle}
                src={welcomeRiv}
                stateMachines="State Machine 1"
                tooltipText={gridText.gridItem5.tooltipText}
                tooltipPosition={gridText.gridItem5.tooltipPosition}
              />
              <GridRive
                className="item-6"
                href={hrefLink.works}
                ariaLabel={gridText.gridItem6.ariaLabel}
                ariaTitle={gridText.gridItem6.ariaTitle}
                src={webDesignerRiv}
                stateMachines="State Machine 1"
                tooltipText={gridText.gridItem6.tooltipText}
                tooltipPosition={gridText.gridItem6.tooltipPosition}
              />
              <GridSvg
                className="item-7 logoSvg-visible"
                href={hrefLink.work1}
                ariaLabel={gridText.gridItem7.ariaLabel}
                ariaTitle={gridText.gridItem7.ariaTitle}
                imageSrc={sodenoura}
                imageMeta={gridText.gridItem7.Alt}
                tooltipText={gridText.gridItem7.tooltipText}
                tooltipPosition={gridText.gridItem7.tooltipPosition}
              />
              <GridSvg
                className="item-8  logoSvg-visible"
                href={hrefLink.work2}
                ariaLabel={gridText.gridItem8.ariaLabel}
                ariaTitle={gridText.gridItem8.ariaTitle}
                imageSrc={gaura}
                imageMeta={gridText.gridItem8.Alt}
                tooltipText={gridText.gridItem8.tooltipText}
                tooltipPosition={gridText.gridItem8.tooltipPosition}
              />
              <GridSvg
                className="item-9  logoSvg-visible"
                href={hrefLink.work3}
                ariaLabel={gridText.gridItem9.ariaLabel}
                ariaTitle={gridText.gridItem9.ariaTitle}
                imageSrc={pikucha}
                imageMeta={gridText.gridItem9.Alt}
                tooltipText={gridText.gridItem9.tooltipText}
                tooltipPosition={gridText.gridItem9.tooltipPosition}
              />
              <GridSvg
                className="item-10 logoSvg-hidden"
                href={hrefLink.work1}
                ariaLabel={gridText.gridItem10.ariaLabel}
                ariaTitle={gridText.gridItem10.ariaTitle}
                imageSrc={sodenoura2}
                imageMeta={gridText.gridItem10.Alt}
                tooltipText={gridText.gridItem10.tooltipText}
                tooltipPosition={gridText.gridItem10.tooltipPosition}
              />
              <GridSvg
                className="item-11 logoSvg-hidden"
                href={hrefLink.work2}
                ariaLabel={gridText.gridItem11.ariaLabel}
                ariaTitle={gridText.gridItem11.ariaTitle}
                imageSrc={gaura2}
                imageMeta={gridText.gridItem11.Alt}
                tooltipText={gridText.gridItem11.tooltipText}
                tooltipPosition={gridText.gridItem11.tooltipPosition}
              />
              <GridSvg
                className="item-12 logoSvg-hidden"
                href={hrefLink.work3}
                ariaLabel={gridText.gridItem12.ariaLabel}
                ariaTitle={gridText.gridItem12.ariaTitle}
                imageSrc={pikucha2}
                imageMeta={gridText.gridItem12.Alt}
                tooltipText={gridText.gridItem12.tooltipText}
                tooltipPosition={gridText.gridItem12.tooltipPosition}
              />
            </ul>
            <ul class="control__menu">
              <li class="control__menu_item">
                <button
                  id="play"
                  class="button"
                  type="button"
                  onclick="playAll()"
                  aria-label={gridText.play}
                  title={gridText.play}
                >
                  <SafeIcon class="button__image" name={play.icon} />
                </button>
              </li>
              <li>
                <button
                  id="pause"
                  class="button"
                  type="button"
                  onclick="pauseAll()"
                  aria-label={gridText.pause}
                  title={gridText.pause}
                >
                  <SafeIcon class="button__image" name={pause.icon} />
                </button>
              </li>
              <li>
                <button
                  id="reverse"
                  class="button"
                  type="button"
                  onclick="reverseAll()"
                  aria-label={gridText.reverse}
                  title={gridText.reverse}
                >
                  <SafeIcon class="button__image" name={reverse.icon} />
                </button>
              </li>
              <li>
                <button
                  id="restart"
                  class="button"
                  type="button"
                  onclick="restartAll()"
                  aria-label={gridText.restart}
                  title={gridText.restart}
                >
                  <SafeIcon class="button__image" name={restart.icon} />
                </button>
              </li>
            </ul>
          </div>
        </div>
        <div class="sidebar">
          <SwiperMenu />
        </div>
      </div>

      <div class="swiper-display-container">
        <SwiperDisplay />
      </div>
    </main>
    <Footer />
  </div>
  <script src="../scripts/confetti.ts"></script>
</Layout>

<style is:global>
  /* ResponsiveFvコンポーネントの表示制御 */
  .responsive-fv {
    display: none;
  }

  #main-container {
    display: grid;
    grid-template-columns: 24% 50% 24%;
    gap: 1%;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    position: relative;
    padding-block: 1.5rem;
  }

  /* スマホサイズでのレスポンシブ対応 */
  @media screen and (max-width: 768px) {
    .responsive-fv {
      display: block;
      order: 1;
      width: 100%;
      margin-bottom: 1rem;
    }
    #main-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      padding-block: 1rem;
      padding-inline: 1rem;
    }

    .toolbar {
      order: 1;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      /* margin-bottom: 1rem; */
    }

    .grid {
      order: 4;
      width: 100%;
      height: auto;
      min-height: 400px;
    }

    .sidebar {
      order: 3;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .swiper-display-container {
      order: 5;
      width: 100%;
      margin-bottom: 1rem;
    }

    .grid__menu {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

    .control__menu {
      flex-direction: row;
      justify-content: center;
      gap: 1rem;
    }
  }

  /* 480px以下での超小型スマホ最適化 */
  @media screen and (max-width: 480px) {
    #main-container {
      padding-inline: 0.5rem;
      gap: 0.75rem;
    }

    .toolbar {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }

    .sidebar {
      grid-template-columns: 1fr;
      margin-block-end: 0;
    }

    .grid__menu {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }

    .control__menu {
      flex-direction: row;
      gap: 0.5rem;
      padding-inline: 1rem;
    }
  }
  #main-container.is-notImage {
    background-image: none;
    background-color: transparent;
  }
  .is-notImage {
    transition: background 2s ease-in-out;
  }
  .toolbar {
    /* grid-area: 1 / 1 / 2 / 2; */
    /* grid-area: 1 / 1 / 1 / 1; */
    display: flex;
    flex-direction: column;
    row-gap: 0.75rem;
    color: inherit;
    position: relative;
  }
  .grid {
    grid-area: 1 / 2 / 2 / 3;
    width: 100%;
    height: 100%;
    position: relative;
    background-color: transparent;
    transition:
      5s height ease-out,
      5s opacity ease-out;
  }
  .canvas {
    width: 100%;
    height: 100%;
    background-color: transparent;
    position: relative;
  }
  .wrapper {
    width: 100%;
    max-width: 700px;
    margin-inline: auto;
  }
  .grid__menu {
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 1rem;
    justify-items: center;
    list-style: none;
    box-shadow: 0 8px 16px rgba(0 0 0 / 0.6);
    border-radius: 8%;
    position: relative;
    overflow: hidden;
    padding-block: 2rem;
    transform-origin: center;
    /* transform-style: preserve-3d;
    transform: perspective(1600px); */
    transition: box-shadow 0.4s ease;
  }
  .grid__menu:is(:hover, :focus-visible) {
    box-shadow: 0 16px 8px rgba(0 0 0 / 0.6);
  }
  html.dark .grid__menu:is(:hover, :focus-visible) {
    box-shadow: 0 16px 8px rgba(255 255 255 / 0.6);
  }
  .grid__menu::before {
    content: "";
    width: 100%;
    max-width: 560px;
    height: 100%;
    max-height: 480px;
    display: block;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(236, 159, 255, 1),
      #ffffff71,
      rgba(147, 183, 255, 1),
      #ffffff71,
      rgba(170, 244, 254, 1),
      transparent
    );
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transform: translateX(-200px) skew(-16deg);
    animation: shineGrid 6s linear infinite;
  }
  @keyframes shineGrid {
    0% {
      transform: translateX(-200px) skew(-16deg);
      opacity: 0;
    }
    8% {
      opacity: 1;
    }
    48% {
      transform: translateX(200px) skew(-16deg);
      opacity: 0.9;
    }
    56% {
      opacity: 0.3;
    }
    100% {
      transform: translateX(-200px) skew(-16deg);
      opacity: 0;
    }
  }
  .grid__menu_item {
    width: 100px;
    height: 100px;
    border-radius: 0.625rem;
    box-shadow: 0 8px 16px rgba(0 0 0 / 0.6);
    position: relative;
  }
  .grid__menu_item:is(:hover, :focus-visible) {
    background: transparent;
  }
  .grid__menu_item .grid__menu_link {
    display: block;
  }
  .grid__menu_item .grid__menu_link::before {
    position: absolute;
    content: "";
    transform: scale(0);
    opacity: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
  }
  .grid__menu_item .grid__menu_svg {
    width: 100%;
    height: 100%;
    aspect-ratio: 1 / 1;
    overflow: hidden;
    /* perspective: 1000px; */
    transition: transform 0.4s ease;
  }
  .item-1,
  .item-2,
  .item-3 {
    background: #ffffff;
  }
  .item-7,
  .item-8,
  .item-9 {
    background: transparent;
  }
  .grid__menu_item .grid__menu_svg:is(:hover, :focus-visible) {
    /* border-radius: 100%; */
    transform: scale(1.1);
  }

  .grid__menu_svg img {
    width: 100%;
    height: 100%;
    border-radius: 0.625rem;
    object-fit: contain;
    image-rendering: high-quality;
    image-rendering: -webkit-optimize-contrast;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  .grid__menu_item:not(.item-4, .item-5, .item-6) .grid__menu_svg {
    /* background: transparent; */
    box-shadow: 0 0 0 rgba(0 0 0 / 0.1);
    animation: translateGridImage 20s linear infinite;
    animation-play-state: running;
  }
  .grid__menu_item:not(.item-4, .item-5, .item-6):is(:hover, :focus-visible) .grid__menu_svg {
    animation-play-state: paused;
    box-shadow: 0 12px 12px rgba(0 0 0 / 0.6);
    border-radius: 0.5rem;
    transition:
      border-radius 0.4s ease,
      box-shadow 0.4s ease;
  }
  @keyframes translateGridImage {
    0% {
      transform: translateY(0);
    }
    25% {
      transform: translateY(-8px);
    }
    50% {
      transform: translateY(0);
    }
    75% {
      transform: translateY(8px);
    }
    100% {
      transform: translateY(0);
    }
  }
  .item__tooltip_right {
    font-size: 0.875rem;
    color: #010101;
    background-color: #fff;
    item-shadow: 0px 10px 20px rgba(0, 0, 0, 0.6);
    white-space: nowrap;
    border: #ccc 1px solid;
    border-radius: 0.625rem;
    pointer-events: none;
    position: absolute;
    bottom: -10%;
    left: 120%;
    opacity: 0;
    transform: translateX(-50%);
    transition: opacity 0.3s ease;
    padding: 0.5rem;
  }
  .item__tooltip_left {
    font-size: 0.875rem;
    color: #010101;
    background-color: #fff;
    item-shadow: 0px 10px 20px rgba(0, 0, 0, 0.6);
    white-space: nowrap;
    border: #ccc 1px solid;
    border-radius: 0.625rem;
    pointer-events: none;
    position: absolute;
    bottom: -10%;
    left: -25%;
    opacity: 0;
    transform: translateX(-50%);
    transition: opacity 0.3s ease;
    padding: 0.5rem;
  }
  .item__tooltip_right::before {
    display: inline-block;
    content: "";
    border: transparent 12px solid;
    border-left: #fff 12px solid;
    position: absolute;
    bottom: 68%;
    right: 36%;
  }
  .item__tooltip_left::before {
    display: inline-block;
    content: "";
    border: transparent 12px solid;
    border-right: #fff 12px solid;
    position: absolute;
    bottom: 68%;
    left: 36%;
  }
  .control__menu {
    display: flex;
    justify-content: center;
    align-items: center;
    background: transparent;
    list-style: none;
    box-shadow: 0 8px 16px rgba(0 0 0 / 0.6);
    border-radius: 1rem;
    position: relative;
    z-index: 1;
    overflow: hidden;
    margin-block-start: 1rem;
    padding-block: 1rem;
    padding-inline: 3rem;
    transition: all 0.3s ease-in;
  }
  .control__menu:is(:hover, :focus-visible) {
    box-shadow: 0 16px 8px rgba(0 0 0 / 0.6);
  }
  html.dark .control__menu:is(:hover, :focus-visible) {
    box-shadow: 0 16px 8px rgba(255 255 255 / 0.6);
  }
  .control__menu::before {
    content: "";
    width: 100%;
    max-width: 560px;
    height: 100%;
    max-height: 120px;
    display: block;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(236, 159, 255, 1),
      #ffffff71,
      rgba(147, 183, 255, 1),
      #ffffff71,
      rgba(170, 244, 254, 1),
      transparent
    );
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transform: translateX(-200px) skew(-16deg);
    animation: shineController 6s linear infinite;
    animation-delay: 0.6s;
  }
  @keyframes shineController {
    0% {
      transform: translateX(-200px) skew(-16deg);
      opacity: 0;
    }
    16% {
      opacity: 1;
    }
    48% {
      transform: translateX(200px) skew(-16deg);
      opacity: 0.9;
    }
    56% {
      opacity: 0.3;
    }
    100% {
      transform: translateX(-200px) skew(-16deg);
      opacity: 0;
    }
  }
  .button {
    display: block;
    width: 60px;
    height: 60px;
    background: linear-gradient(180deg, rgba(0, 19, 172, 1) 0%, rgba(100, 255, 209, 1) 55%, rgba(43, 255, 152, 1) 100%);
    background: linear-gradient(
      135deg,
      rgba(236, 159, 255, 1) 30%,
      rgba(147, 183, 255, 1) 55%,
      rgba(170, 244, 254, 1) 78%
    );
    box-shadow: 0 18px 20px rgba(0 0 0 / 0.6);
    border: #fff 1px solid;
    border-radius: 0.675rem;
    overflow: hidden;
    aspect-ratio: 1 / 1;
    top: 1px;
    transform: rotate(0deg);
    transition:
      transform 0.1s ease,
      top 0.2s cubic-bezier(0.22, 1, 0.36, 1),
      border-radius 0.3s ease,
      box-shadow 0.6s ease;
    margin-inline: 1rem;
    padding: 0.5rem;
  }
  @media screen and (max-width: 480px) and (-webkit-min-device-pixel-ratio: 2) {
    .grid__menu {
      padding-inline: 0.5rem;
    }
    .button {
      margin-inline: 0.25rem;
    }
  }
  .button.is-rotating {
    background: linear-gradient(
      45deg,
      rgba(236, 159, 255, 1) 30%,
      rgba(147, 183, 255, 1) 55%,
      rgba(170, 244, 254, 1) 78%
    );
    top: -10px;
    border-radius: 50%;
    box-shadow:
      1px 2px 4px 0 var(--clay-box-shadow),
      2px 4px 8px 0 var(--clay-box-shadow),
      inset 2px 2px 8px var(--outset-shadow),
      inset -2px -2px 8px var(--inset-shadow);
    animation: rotateButton 2.5s linear infinite;
  }
  .button.reset-rotation {
    animation: none;
    transition: transform 0.6s ease;
    transform: rotate(0deg);
  }
  @keyframes rotateButton {
    to {
      transform: rotate(360deg);
    }
  }
  .button:active {
    transform: scale(0.8);
    box-shadow: 0 8px 8px rgba(0 0 0 / 0.4);
  }
  .button__image {
    width: 40px;
    height: 40px;
    object-fit: cover;
  }

  #play svg,
  #pause svg,
  #reverse svg,
  #restart svg {
    color: rgb(255, 255, 255);
    fill: rgb(255, 255, 255);
  }

  .sidebar {
    grid-area: 1 / 3 / 2 / 4;
    display: grid;
  }
  /* .particles-container {
    width: 100%;
    height: 200px;
    border: rebeccapurple 1px solid;
    position: relative;
  } */
  #tsparticles {
    width: 100%;
    height: 500px;
    display: block;
  }
</style>

<script>
  const buttonSound = new Audio("/sounds/buttonSound.mp3");

  function playSound() {
    const isSoundOn = localStorage.getItem("sound-enabled") === "true";

    if (isSoundOn) {
      try {
        buttonSound.currentTime = 0;
        void buttonSound.play();
      } catch (error) {
        console.error("Sound playback failed:", error);
      }
    }
  }

  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const tweens: gsap.core.Tween[] = [];

  function createTween(selector: string, props: gsap.TweenVars) {
    tweens.push(
      gsap.to(selector, {
        ...props,
        paused: true,
      })
    );
  }

  window.addEventListener("load", () => {
    const grid: HTMLElement | null = document.getElementById("js-grid");
    const gridMenu: HTMLElement | null = document.getElementById("js-grid__menu");

    gsap
      .timeline()
      .from(grid, {
        scale: 0.4,
        duration: 1,
        ease: "power1.in",
      })
      .from(
        gridMenu,
        {
          y: -200,
          duration: 1,
          ease: "power1.inOut",
        },
        "-=0.3"
      );
  });

  document.addEventListener("DOMContentLoaded", () => {
    const pageContainer: HTMLElement | null = document.getElementById("page-wrap");
    const astroElement: HTMLElement | null = document.querySelector(".astro-a");

    if (astroElement && pageContainer) {
      gsap.to(astroElement, {
        y: () => pageContainer.offsetHeight * 0.2,
        ease: "power1.out",
        scrollTrigger: {
          trigger: pageContainer,
          start: "top top",
          end: "center end",
          scrub: true,
        },
      });
    }
  });

  document.querySelectorAll(".grid__menu_item").forEach((item) => {
    const tooltipRight = item.querySelector(".item__tooltip_right") as HTMLElement;
    const tooltipLeft = item.querySelector(".item__tooltip_left") as HTMLElement;

    item.addEventListener("mouseenter", () => {
      [tooltipRight, tooltipLeft].forEach((tooltip) => {
        if (tooltip) {
          gsap.to(tooltip, {
            opacity: 1,
            y: -10,
            duration: 0.3,
            ease: "power1.out",
          });
        }
      });
    });

    item.addEventListener("mouseleave", () => {
      [tooltipRight, tooltipLeft].forEach((tooltip) => {
        if (tooltip) {
          gsap.to(tooltip, {
            opacity: 0,
            y: 0,
            duration: 0.3,
            ease: "power1.in",
          });
        }
      });
    });
  });

  // 画面サイズとデバイスに応じたアニメーション設定
  const getAnimationSettings = (): [string, gsap.TweenVars][] => {
    const screenWidth = window.innerWidth;
    const isMobile = screenWidth <= 768;
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isAndroid = /Android/.test(navigator.userAgent);

    let item4X: number;
    let item6X: number;

    if (isMobile) {
      if (isIOS) {
        // iPhone: はみ出しを防ぐため少し小さめに調整
        item4X = 250;
        item6X = -250;
      } else if (isAndroid) {
        // Android: 足りない分を補うため少し大きめに調整
        item4X = 264;
        item6X = -264;
      } else {
        // その他のデバイス
        item4X = 254;
        item6X = -254;
      }
    } else {
      // デスクトップ
      item4X = 440;
      item6X = -440;
    }

    return [
      [".item-1", { y: 230, rotation: 720, duration: 1.2 }],
      [".item-2", { y: 230, rotation: 360, duration: 1.6 }],
      [".item-3", { y: 230, rotation: 720, duration: 2 }],
      [".item-4", { x: item4X, rotation: 360, duration: 2.3 }],
      [".item-5", { x: 0, rotation: 1080, duration: 2.6 }],
      [".item-6", { x: item6X, rotation: 360, duration: 2.3 }],
      [".item-7", { y: -230, rotation: 720, duration: 1.4 }],
      [".item-8", { y: -230, rotation: 360, duration: 1.8 }],
      [".item-9", { y: -230, rotation: 720, duration: 2.2 }],
      [".item-10", { y: -230, rotation: 720, duration: 1.4 }],
      [".item-11", { y: -230, rotation: 360, duration: 1.8 }],
      [".item-12", { y: -230, rotation: 720, duration: 2.2 }],
    ];
  };

  const animationSettings = getAnimationSettings();

  // アニメーション設定を適用
  animationSettings.forEach(([selector, props]) => createTween(selector, props));

  // ウィンドウリサイズ時にアニメーション設定を再生成
  window.addEventListener("resize", () => {
    // 既存のtweenをクリア
    tweens.forEach((tween) => tween.kill());
    tweens.length = 0;

    // 新しい設定でtweenを作成
    const newAnimationSettings = getAnimationSettings();
    newAnimationSettings.forEach(([selector, props]) => createTween(selector, props));
  });

  function updateTooltipClassByPosition(): void {
    const item4 = document.querySelector(".item-4");
    const item6 = document.querySelector(".item-6");
    if (!item4 || !item6) return;

    const rect4 = item4.getBoundingClientRect();
    const rect6 = item6.getBoundingClientRect();

    const tooltip4 = item4.querySelector(".item__tooltip_left, .item__tooltip_right");
    const tooltip6 = item6.querySelector(".item__tooltip_left, .item__tooltip_right");

    if (tooltip4) {
      tooltip4.classList.remove("item__tooltip_left", "item__tooltip_right");
      tooltip4.classList.add(rect4.left < rect6.left ? "item__tooltip_left" : "item__tooltip_right");
    }

    if (tooltip6) {
      tooltip6.classList.remove("item__tooltip_left", "item__tooltip_right");
      tooltip6.classList.add(rect6.left < rect4.left ? "item__tooltip_left" : "item__tooltip_right");
    }
  }

  function playAll(): void {
    tweens.forEach((tween) => tween.play());
    updateTooltipClassByPosition();
    playSound();
  }
  function pauseAll(): void {
    tweens.forEach((tween) => tween.pause());
    updateTooltipClassByPosition();
    playSound();
  }
  function reverseAll(): void {
    tweens.forEach((tween) => tween.reverse());
    updateTooltipClassByPosition();
    playSound();
  }
  function restartAll(): void {
    tweens.forEach((tween) => tween.restart());
    updateTooltipClassByPosition();
    playSound();
  }

  document.getElementById("play")?.addEventListener("click", playAll);
  document.getElementById("pause")?.addEventListener("click", pauseAll);
  document.getElementById("reverse")?.addEventListener("click", reverseAll);
  document.getElementById("restart")?.addEventListener("click", restartAll);

  const controlMenu = document.querySelector(".control__menu");
  const buttons = document.querySelectorAll(".button");

  // 各ボタンの回転タイムアウトを管理するMap
  const buttonRotationTimeouts = new Map();

  buttons.forEach((button) => {
    button.addEventListener("mouseenter", () => {
      // 既存のタイムアウトをクリア
      const existingTimeout = buttonRotationTimeouts.get(button);
      if (existingTimeout) {
        clearTimeout(existingTimeout);
        buttonRotationTimeouts.delete(button);
      }

      button.classList.remove("reset-rotation");
      button.classList.add("is-rotating");

      // 3秒後に自動的に回転を停止
      const timeoutId = setTimeout(() => {
        button.classList.remove("is-rotating");
        button.classList.add("reset-rotation");
        button.addEventListener(
          "transitionend",
          () => {
            button.classList.remove("reset-rotation");
          },
          {
            once: true,
          }
        );
        buttonRotationTimeouts.delete(button);
      }, 3000);

      buttonRotationTimeouts.set(button, timeoutId);
    });

    button.addEventListener("mouseleave", () => {
      // タイムアウトをクリア
      const timeoutId = buttonRotationTimeouts.get(button);
      if (timeoutId) {
        clearTimeout(timeoutId);
        buttonRotationTimeouts.delete(button);
      }

      button.classList.remove("is-rotating");
    });
  });

  controlMenu?.addEventListener("mouseleave", () => {
    buttons.forEach((button) => {
      // タイムアウトをクリア
      const timeoutId = buttonRotationTimeouts.get(button);
      if (timeoutId) {
        clearTimeout(timeoutId);
        buttonRotationTimeouts.delete(button);
      }

      button.classList.remove("is-rotating");
      button.classList.add("reset-rotation");
      button.addEventListener(
        "transitionend",
        () => {
          button.classList.remove("reset-rotation");
        },
        {
          once: true,
        }
      );
    });
  });

  const rotateRestartButton = () => {
    const restartButton = document.getElementById("restart");
    if (!restartButton) return;

    gsap.fromTo(
      restartButton,
      {
        rotation: 0,
        scale: 1,
      },
      {
        rotation: 720,
        scale: 1.3,
        duration: 1.5,
        ease: "power2.inOut",
        onComplete: () => {
          gsap.set(restartButton, {
            clearProps: "rotation, scale",
          });
        },
      }
    );
  };

  let lastTriggeredSecond: number | null = null;

  const rotateRestartButtonTimeInterval = () => {
    setInterval(() => {
      const now = new Date();
      const seconds = now.getSeconds();

      if ((seconds === 0 || seconds === 30) && seconds !== lastTriggeredSecond) {
        rotateRestartButton();

        lastTriggeredSecond = seconds;
      } else if (seconds !== 0 && seconds !== 30) {
        lastTriggeredSecond = null;
      }
    }, 1000);
  };

  // riv画像のプリロード機能
  const preloadRiveImages = () => {
    const riveImages = ["/riv/my-portfolio.riv", "/riv/working-office.riv", "/riv/designer-life.riv"];

    riveImages.forEach((src) => {
      const link = document.createElement("link");
      link.rel = "preload";
      link.as = "fetch";
      link.href = src;
      link.crossOrigin = "anonymous";
      document.head.appendChild(link);
    });
  };

  // ページ読み込み時にriv画像をプリロード
  document.addEventListener("DOMContentLoaded", preloadRiveImages);

  window.addEventListener("load", () => {
    rotateRestartButtonTimeInterval();
  });
</script>
