---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import type { GetStaticPaths } from "astro";
// import { Breadcrumbs } from "astro-breadcrumbs";
// import "astro-breadcrumbs/breadcrumbs.css";
// import "../../styles/astro-breadcrumbs-config.scss";
import { generateBreadcrumbs } from "../../util/generateBreadcrumbs";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import globalText from "../../data/globalText.json";
import worksText from "../../data/worksText.json";
import { WORKS_PAGE_API } from "../../api/headlessCms";

interface WorkObject {
  id: string;
  title: {
    rendered: string;
  };
  slug: string;
  acf?: {
    screenshot_pc?: string;
    left_link?: string;
    right_access?: string;
  };
}

interface PageObject {
  url: {
    first: string | undefined;
    prev: string | undefined;
    current: string | undefined;
    next: string | undefined;
    last: string | undefined;
    base: string;
  };
  data: WorkObject[];
  currentPage: number;
  lastPage: number;
}

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  try {
    console.log("Fetching data from WORKS_PAGE_API:", WORKS_PAGE_API);

    const worksData = await fetch(WORKS_PAGE_API);

    if (!worksData.ok) {
      throw new Error(`Failed to fetch works: ${worksData.status}`);
    }

    const allWorks = (await worksData.json()) as WorkObject[];

    console.log("API Response:", allWorks);

    if (!Array.isArray(allWorks) || allWorks.length === 0) {
      console.warn("No works found. Returning empty paths.");
      return [];
    }

    const paginatedData = paginate(allWorks, { pageSize: 4 });

    console.log("Paginated works data:", paginatedData);

    const paths = paginatedData.map((path, index) => ({
      params: { page: String(index + 1) },
      props: path.props,
    }));

    console.log("Generated paths before modification:", paths);

    if (paths.length > 0) {
      const defaultPageProps = (paginatedData[0]?.props ?? {
        page: {
          data: [] as WorkObject[],
          currentPage: 1,
          lastPage: 1,
        },
      }) as { [x: string]: unknown; page: import("astro").Page<WorkObject> };

      paths.unshift({
        params: { page: "" },
        props: defaultPageProps,
      });

      paths.unshift({
        params: { page: "1" },
        props: defaultPageProps,
      });
    }

    console.log("Generated paths after modification:", paths);

    return paths;
  } catch (error) {
    console.error("Error in getStaticPaths:", error);
    return [];
  }
};

const { page } = Astro.props as { page: PageObject };
console.log("Astro props:", page);

const isShowPagination = page.lastPage > 1;

const works = Array.isArray(page.data) ? page.data : [];

const repeatTimes = 3;

const repeatedWorks = Array.from({ length: works.length * repeatTimes }, (_, i) => works[i % works.length]);

const crumbs = generateBreadcrumbs(Astro.url.pathname);

// const crumbs = [{ name: "Home", path: "/" }, { name: "Works" }];

const worksItems = {
  alt: "の画像",
  notFound: "No image available",
  width: 320,
  height: 160,
  ariaLabel: "のページへ",
  ariaTitle: "のページへ",
  ariaLabelNewTab: "のページへ(新しいタブで開く)",
  ariaTitleNewTab: "のページへ(新しいタブで開く)",
};

const worksPagination = {
  first: "最初のページへ",
  prev: "前のページへ",
  current: "現在のページ",
  next: "次のページへ",
  last: "最後のページへ",
};
---

<Layout
  title={globalText.works.title}
  description={globalText.works.description}
  ogType={globalText.local.type}
  ogTitle={globalText.works.title}
  ogDescription={globalText.works.description}
  twitterTitle={globalText.works.title}
  twitterDescription={globalText.works.description}
>
  <div id="outer-container">
    <Header />
    <main id="page-wrap">
      <div class="breadcrumbs__wrapper">
        <Breadcrumbs {crumbs} />
      </div>
      <div class="works">
        <div class="works__wrapper">
          <div class="scrollImage">
            <ul class="scrollImage__menu">
              {
                repeatedWorks.length > 0 ? (
                  repeatedWorks
                    .filter((work): work is WorkObject => typeof work !== "undefined")
                    .map((work: WorkObject) => (
                      <li class="scrollImage__menu_item">
                        <h2 class="scrollImage__header">{work?.title?.rendered}</h2>
                        <figure class="scrollImage__figure">
                          <img
                            class="scrollImage__image"
                            src={work?.acf?.screenshot_pc ?? ""}
                            alt={`${work?.title?.rendered ?? "No Image Available"}${worksItems.alt}`}
                            width={worksItems.width}
                            height={worksItems.height}
                            loading="lazy"
                            decoding="async"
                          />
                        </figure>
                        <a
                          class="scrollImage__link"
                          href={work?.acf?.left_link ?? ""}
                          aria-label={`${work?.acf?.left_link}${worksItems.ariaLabel}`}
                          title={`${work?.acf?.left_link}${worksItems.ariaTitle}`}
                          set:html={work?.acf?.left_link ?? ""}
                        />
                        <p class="scrollImage__text">{work?.acf?.right_access ?? "No additional information"}</p>
                      </li>
                    ))
                ) : (
                  <li style="display:none" />
                )
              }
            </ul>
          </div>
          <h1 class="works__title">
            {worksText.worksTitle}
          </h1>
          <p class="works__text">
            {worksText.worksText}
          </p>
          <ul class="worksCard__menu">
            {
              works.length > 0 ? (
                works.map((work: WorkObject) => (
                  <li class="worksCard__menu_item">
                    <h2 class="worksCard__header">
                      <a
                        class="worksCard__slug"
                        href={`/works/${work.slug}`}
                        aria-label={`${work?.title?.rendered}${worksItems.ariaLabel}`}
                        title={`${work?.title?.rendered}${worksItems.ariaTitle}`}
                        set:html={work?.title?.rendered}
                      />
                    </h2>
                    <a
                      class="worksCard__slug"
                      href={`/works/${work.slug}`}
                      aria-label={`${work.slug}(${work?.title?.rendered})${worksItems.ariaLabel}`}
                      title={`${work.slug}(${work?.title?.rendered})${worksItems.ariaTitle}`}
                    >
                      <img
                        class="worksCard__image"
                        src={work?.acf?.screenshot_pc ?? ""}
                        alt={`${work?.title?.rendered ?? "No image available"}${worksItems.alt}`}
                        width={worksItems.width}
                        height={worksItems.height}
                        loading="lazy"
                        decoding="async"
                      />
                    </a>
                    <a
                      class="worksCard__link"
                      href={work?.acf?.left_link ?? ""}
                      aria-label={`${work?.title?.rendered}${worksItems.ariaLabelNewTab}`}
                      title={`${work?.title?.rendered}${worksItems.ariaTitleNewTab}`}
                      target="_blank"
                      set:html={work?.acf?.left_link ?? ""}
                    />
                    <p class="worksCard__body" set:html={work?.acf?.right_access ?? "No additional information"} />
                  </li>
                ))
              ) : (
                <p>{worksText.error.text}</p>
              )
            }
          </ul>

          {
            isShowPagination ? (
              <div class="pagination">
                <ul class="pagination__menu">
                  {page.url.first !== "" && page.currentPage > 1 ? (
                    <li class="pagination__menu_item">
                      <a
                        class="pagination__link_current"
                        href={page.url.first}
                        aria-label={worksPagination.first}
                        title={worksPagination.first}
                      >
                        1
                      </a>
                    </li>
                  ) : (
                    <li class="pagination__menu_item">
                      <span class="pagination__link_empty" />
                    </li>
                  )}
                  {page.url.prev !== "" && page.currentPage > 1 ? (
                    <li class="pagination__menu_item">
                      <a
                        class="pagination__link"
                        href={page.url.prev}
                        aria-label={`${worksPagination.prev}(${page.currentPage - 1})`}
                        title={worksPagination.prev}
                      >
                        &larr;
                      </a>
                    </li>
                  ) : (
                    <li class="pagination__menu_item">
                      <span class="pagination__link_empty" />
                    </li>
                  )}
                  <li class="pagination__menu_item">
                    <a
                      class="pagination__link_current"
                      href={page.url.current}
                      aria-label={`${worksPagination.current}(${page.currentPage})`}
                      title={`${worksPagination.current}(${page.currentPage})`}
                    >
                      {typeof page.currentPage === "number" && page.currentPage > 0 ? page.currentPage : "1"}
                    </a>
                  </li>
                  {page.url.next !== "" && page.currentPage < page.lastPage ? (
                    <li class="pagination__menu_item">
                      <a
                        class="pagination__link"
                        href={page.url.next}
                        aria-label={`${worksPagination.next}(${page.currentPage + 1})`}
                        title={worksPagination.next}
                      >
                        &rarr;
                      </a>
                    </li>
                  ) : (
                    <li class="pagination__menu_item">
                      <span class="pagination__link_empty" />
                    </li>
                  )}
                  {page.url.last !== "" && page.currentPage !== page.lastPage ? (
                    <li class="pagination__menu_item">
                      <a
                        class="pagination__link_current"
                        href={page.url.last}
                        aria-label={`${worksPagination.last}(${page.lastPage})`}
                        title={`${worksPagination.last}(${page.lastPage})`}
                      >
                        {page.lastPage}
                      </a>
                    </li>
                  ) : (
                    <li class="pagination__menu_item">
                      <span class="pagination__link_empty" />
                    </li>
                  )}
                </ul>
              </div>
            ) : (
              <div class="pagination" style="display: none;" />
            )
          }
        </div>
      </div>
    </main>
    <Footer />
  </div>
</Layout>

<style>
  .works {
    width: 100%;
    line-height: 1.6;
    color: inherit;
    background: transparent;
    position: relative;
    overflow: hidden;
  }
  .works__wrapper {
    width: 700px;
    max-width: calc(100% - 2rem);
    margin-inline: auto;
  }
  .scrollImage {
    position: fixed;
    top: 0;
    left: 22%;
    z-index: -1;
  }
  .scrollImage__menu {
    width: 700px;
    height: 400px;
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
    /* background: transparent; */
    list-style: none;
    filter: sepia(10%);
    opacity: 0;
    margin-block-start: 3rem;
    margin-inline: auto;
    animation: skew-scroll 24s linear infinite;
  }
  @keyframes skew-scroll {
    0% {
      transform: rotateX(8deg) rotate(-8deg) skew(8deg) translateZ(0) translateY(110%);
      opacity: 0;
    }
    24% {
      opacity: 0.7;
    }
    48% {
      opacity: 0.3;
    }
    100% {
      transform: rotateX(8deg) rotate(-8deg) skew(8deg) translateZ(0) translateY(-430%);
      opacity: 0;
    }
  }
  .scrollImage__menu_item {
    width: 100%;
    display: grid;
    /* grid-template-rows: subgrid; */
    /* grid-row: span 4; */
    color: rebeccapurple;
    background-color: whitesmoke;
    background-color: transparent;
    /* overflow: hidden; */
  }
  .scrollImage__header {
    align-self: flex-start;
    flex-shrink: 1;
    font-size: 1rem;
    overflow-wrap: normal;
    padding-inline: 1rem;
  }
  .scrollImage__figure {
    display: flex;
    flex-shrink: 0;
    /* background-color: transparent; */
    aspect-ratio: 2 / 1;
    overflow: hidden;
    margin-block-start: 1rem;
  }
  .scrollImage__image {
    width: 100%;
    height: 100%;
    filter: sepia(10%);
    object-fit: contain;
    overflow: hidden;
    padding-inline: 0.25rem;
  }
  .scrollImage__link {
    /* align-self: center; */
    font-size: 0.875rem;
    color: white;
    text-align: center;
    text-decoration: none;
    pointer-events: none;
    margin-block-start: 1rem;
    padding-inline: 0.5rem;
  }
  .scrollImage__text {
    flex-shrink: 0;
    font-size: 0.75rem;
    text-align: center;
    margin-block-start: 1rem;
    padding-inline: 0.75rem;
  }
  .works__title {
    font-size: 2rem;
  }
  .works__text {
    font-size: 1rem;
    line-height: 1.8;
    letter-spacing: 0.2em;
    color: inherit;
    padding-inline: 1rem;
  }
  .worksCard__menu {
    width: 100%;
    display: grid;
    /* grid-template-columns: repeat(auto-fill, minmax(24ch, 1fr)); */
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    /* grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); */
    gap: 1.5rem;
    list-style: none;
    margin-block-start: 3rem;
  }
  .worksCard__menu_item {
    display: grid;
    grid-template-rows: subgrid;
    grid-row: span 4;
    /* flex-direction: column; */
    /* align-items: center;
    justify-content: center; */
    color: rebeccapurple;
    background-color: whitesmoke;
    border: rebeccapurple 1px solid;
    border-radius: 1rem;
    box-shadow: 0 0 8px 0 rgba(0 0 0 / 0.6);
    overflow: hidden;
    position: relative;
    padding-block: 1rem;
    /* transform: translateX(300px) skew(-32deg); */
    transition: all 0.6s cubic-bezier(0.22, 1, 0.36, 1);
  }
  .worksCard__menu_item::before {
    content: "";
    width: 400px;
    height: 350px;
    display: grid;
    grid-template-rows: subgrid;
    grid-row: span 4;
    background: linear-gradient(
      -90deg,
      transparent,
      rgba(236, 159, 255, 1),
      #ffffff71,
      rgba(147, 183, 255, 1),
      #ffffff71,
      rgba(170, 244, 254, 1),
      transparent
    );
    /* background: linear-gradient(
      -90deg,
      transparent,
      #ffffff71,
      transparent,
      #ffffff71,
      transparent
    ); */
    /* background: linear-gradient(
      -90deg,
      transparent,
      #ffffff,
      #ffffff71,
      #ffffff,
      #ffffff71,
      #ffffff,
      transparent
    ); */
    position: absolute;
    top: 0;
    right: 0;
    z-index: -1;
    transform: translateX(300px) skew(-32deg);
    opacity: 0;
    animation: shineCard 2.5s linear infinite;
    /* animation: shineCard 2s linear infinite; */
  }
  @keyframes shineCard {
    0% {
      transform: translateX(300px) skew(-32deg);
      opacity: 0;
    }
    8% {
      opacity: 1;
    }
    48% {
      transform: translateX(-300px) skew(-32deg);
      opacity: 0.9;
    }
    50% {
      opacity: 0.1;
    }
    100% {
      transform: translateX(300px) skew(-32deg);
      opacity: 0;
    }
  }
  .worksCard__menu_item:is(:hover, :focus-visible) {
    background-color: transparent;
    box-shadow: 0 10px 10px rgba(0 0 0 / 0.6);
  }
  /* @media (prefers-color-scheme: light) {
    html.light .worksCard__menu_item:is(:hover, :focus-visible) {
      color: rebeccapurple;
      color: red;
    }
  } */
  @media (prefers-color-scheme: dark) {
    html.dark .worksCard__menu_item:is(:hover, :focus-visible) {
      color: #f1f5f9;
    }
    html.dark .worksCard__menu_item::before {
      background: linear-gradient(-90deg, transparent, #ffffff71, transparent, #ffffff71, transparent);
    }
  }
  .worksCard__header {
    font-size: 1rem;
    overflow-wrap: normal;
    margin-inline: 1rem;
    padding-inline: 1rem;
  }
  .worksCard__slug {
    color: inherit;
    text-decoration: none;
    aspect-ratio: 2 / 1;
    overflow: hidden;
  }
  .worksCard__link {
    display: block;
    font-size: 0.875rem;
    /* border-bottom: 1px solid white;
    box-shadow: 0 6px 10px rgba(0 0 0 / 0.6);
    border-radius: 0.5rem; */
    text-decoration: none;
    text-align: center;
    margin-block-start: auto;
    /* margin-inline: 1rem; */
    padding-inline: 0.5rem;
    transition: all 0.4s ease;
  }
  .worksCard__link:is(:hover, :focus-visible) {
    color: #020202;
    /* background-color: rebeccapurple; */
    border-bottom: 1px solid white;
    box-shadow: 0 6px 10px rgba(0 0 0 / 0.6);
    border-radius: 0.5rem;
    /* transform: scale(1.1); */
    margin-inline: 1.5rem;
  }
  @media (prefers-color-scheme: dark) {
    html.dark .worksCard__link:is(:hover, :focus-visible) {
      color: #f1f5f9;
      border: 1px solid white;
    }
  }
  .worksCard__image {
    width: 100%;
    height: 100%;
    box-shadow: 0 6px 10px rgba(0 0 0 / 0.6);
    /* align-self: center; */
    object-fit: contain;
    overflow: hidden;
    transition: all 0.3s ease-in;
    margin-block-start: auto;
    padding-inline: 0.25rem;
  }
  .worksCard__image:is(:hover, :focus-visible) {
    transform: scale(1.2);
    filter: brightness(125%) saturate(125%);
  }
  .worksCard__body {
    /* align-self: center; */
    flex-shrink: 0;
    font-size: 0.75rem;
    text-align: center;
    margin-block-start: auto;
    padding-inline: 0.75rem;
  }
</style>
