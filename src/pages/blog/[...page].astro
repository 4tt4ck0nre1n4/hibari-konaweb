---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import type { GetStaticPaths, PaginateFunction } from "astro";
import SafeIcon from "../../components/SafeIcon.astro";
import { generateBreadcrumbs } from "../../util/generateBreadcrumbs";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
// import "../../../app/public/wp-includes/css/dist/block-library/style.min.css";
// import "../../../app/public/wp-content/themes/arkhe/dist/css/main.css";
import globalText from "../../data/globalText.json";
import { BLOG_PAGE_API } from "../../api/headlessCms";
import FlowingLinesWrapper from "../../components/FlowingLinesWrapper.astro";

interface CategoryInfo {
  id: number;
  slug: string;
  name: string;
  url: string;
}

interface PostDataObject {
  id: number;
  title: {
    rendered: string;
  };
  slug: string;
  data: string;
  date: number;

  acf?: {
    blog_link?: string;
    blog_image?: string;
    blog_title?: string;
    blog_category?: string;
  };
  cat_info?: CategoryInfo[];
}

interface PageDataObject {
  url: {
    first: string | undefined;
    prev: string | undefined;
    current: string | undefined;
    next: string | undefined;
    last: string | undefined;
    base: string;
  };
  start: number;
  end: number;
  total: number;
  data: PostDataObject[];
  currentPage: number;
  size: number;
  lastPage: number;

  baseUrl: string;
}

export const getStaticPaths: GetStaticPaths = async ({ paginate }: { paginate: PaginateFunction }) => {
  try {
    const dataPage = await fetch(BLOG_PAGE_API);

    if (!dataPage.ok) {
      throw new Error(`Failed to fetch posts: ${dataPage.status}`);
    }

    const allPosts: PostDataObject[] = (await dataPage.json()) as unknown as PostDataObject[];

    if (!Array.isArray(allPosts) || allPosts.length === 0) {
      console.warn("No posts found. Returning empty paths.");
      return [];
    }

    const paginatedPages = paginate(allPosts, { pageSize: 6 });

    console.log("Paginated posts data:", JSON.stringify(paginatedPages, null, 2));

    console.log(
      "Checking path.params.page before mapping:",
      paginatedPages.map((p) => p.params.page)
    );

    const paths = paginatedPages.map((path) => ({
      params: { page: path.params?.page },
      props: path.props,
    }));

    console.log("Generated paths before modification:", paths);

    const hasPage1: boolean = paths.some((p) => p.params.page === "1");

    if (!hasPage1 === false && paths.length > 0 && typeof paths[0]?.props !== "undefined") {
      const defaultPostsPageProps = paths[0].props;
      paths.unshift({
        params: { page: undefined },
        props: defaultPostsPageProps,
      });
      paths.unshift({
        params: { page: "1" },
        props: defaultPostsPageProps,
      });
    }

    console.log("Generated paths after modification:", paths);

    return paths;
  } catch (error) {
    console.error("Error in getStaticPaths:", error);
    return [];
  }
};

const { page } = Astro.props as { page: PageDataObject };
console.log("Astro props:", JSON.stringify(page, null, 2));

const posts = Array.isArray(page.data) ? page.data : [];

const hasNextPage = page.size < page.total ? true : false;

const blogTitle = "Blog";
const blogText = "ブログ記事の一覧です。";
const errorBlogText = "ブログ記事が見つかりませんでした。";
const errorCategoryText = "カテゴリーが見つかりませんでした。";
const postAriaLabel = "の記事へ";
const postAriaTitle = "の記事へ";
const categoryAriaLabel = "のカテゴリー記事へ";
const categoryAriaTitle = "のカテゴリー記事へ";

const dateIcon = {
  icon: "emojione-v1:alarm-clock",
  width: 24,
  height: 24,
};

const categoryIcon = {
  icon: "emojione-v1:bookmark",
  width: 24,
  height: 24,
};

const postPagination = {
  first: "最初のページへ",
  prev: "前のページへ",
  current: "現在のページ",
  next: "次のページへ",
  last: "最後のページへ",
};

const crumbs = generateBreadcrumbs(Astro.url.pathname);
---

<Layout
  title={globalText.blog.title}
  description={globalText.blog.description}
  ogType={globalText.local.type}
  ogTitle={globalText.blog.title}
  ogDescription={globalText.blog.description}
  twitterTitle={globalText.blog.title}
  twitterDescription={globalText.blog.description}
>
  <div id="outer-container">
    <Header />
    <main id="page-wrap">
      <div class="breadcrumbs__wrapper">
        <Breadcrumbs {crumbs} />
      </div>
      <div id="main-container">
        <div class="blog__wrapper">
          <FlowingLinesWrapper>
            <h1 class="blog__title">
              {blogTitle}
            </h1>
            <p class="blog__text">
              {blogText}
            </p>
          </FlowingLinesWrapper>
          <ul class="blog__menu">
            {
              posts.length > 0 ? (
                posts.map((post: PostDataObject) => (
                  <li class="blog__menu_item">
                    <article class="blog__menu_article">
                      <a
                        class="blog__menu_link"
                        href={`/blog/${post.slug ?? ""}`}
                        aria-label={`${post.slug}${postAriaLabel}`}
                        title={`${post.slug}${postAriaTitle}`}
                      >
                        <div class="blog__thumbnail">
                          <img
                            class="blog__menu_image"
                            src={typeof post.acf?.blog_image === "string" ? post.acf.blog_image : ""}
                            alt={post.title.rendered}
                            loading="lazy"
                            decoding="async"
                          />
                        </div>
                        <div class="blog__contents">
                          <h2 class="blog__header">{post.acf?.blog_title ?? post.title.rendered}</h2>
                        </div>
                      </a>
                      <div class="blog__footer">
                        <div class="blog__times">
                          <SafeIcon name={dateIcon.icon} width={dateIcon.width} height={dateIcon.height} />
                          <time
                            class="blog__dateTime"
                            datetime={new Date(post.date)
                              .toLocaleDateString("ja-JP", {
                                year: "numeric",
                                month: "2-digit",
                                day: "2-digit",
                              })
                              .replaceAll("/", "-")}
                            set:html={new Date(post.date)
                              .toLocaleDateString("ja-JP", {
                                year: "numeric",
                                month: "2-digit",
                                day: "2-digit",
                              })
                              .replaceAll("/", "-")}
                          />
                        </div>
                        <div class="blog__category">
                          {Array.isArray(post.cat_info) && post.cat_info.length > 0 ? (
                            <a
                              class="category__link"
                              href={`/blog/category/${decodeURIComponent(post.cat_info[0]?.slug ?? "")}`}
                              aria-label={`${post.cat_info[0]?.name}${categoryAriaLabel}`}
                              title={`${post.cat_info[0]?.name}${categoryAriaTitle}`}
                            >
                              <SafeIcon
                                name={categoryIcon.icon}
                                width={categoryIcon.width}
                                height={categoryIcon.height}
                              />
                              <span class="category__link_span" set:html={post.cat_info[0]?.name} />
                            </a>
                          ) : (
                            <span>{errorCategoryText}</span>
                          )}
                        </div>
                      </div>
                    </article>
                  </li>
                ))
              ) : (
                <p>{errorBlogText}</p>
              )
            }
          </ul>

          <div class="pagination">
            {
              hasNextPage && (
                <ul class="pagination__menu">
                  {page.url.first !== "" && page.currentPage > 1 ? (
                    <li class="pagination__menu_item">
                      <a
                        class="pagination__link_current"
                        href={page.url.first}
                        aria-label={postPagination.first}
                        title={postPagination.first}
                      >
                        1
                      </a>
                    </li>
                  ) : (
                    <li class="pagination__menu_item">
                      <span class="pagination__link_empty" />
                    </li>
                  )}
                  {page.url.prev !== "" && page.currentPage > 1 ? (
                    <li class="pagination__menu_item">
                      <a
                        class="pagination__link"
                        href={page.url.prev}
                        aria-label={`${postPagination.prev}(${page.currentPage - 1})`}
                        title={postPagination.prev}
                      >
                        &larr;
                      </a>
                    </li>
                  ) : (
                    <li class="pagination__menu_item">
                      <span class="pagination__link_empty" />
                    </li>
                  )}

                  <li class="pagination__menu_item">
                    <a
                      class="pagination__link_current"
                      href={page.url.current}
                      aria-label={`${postPagination.current}(${page.currentPage})`}
                      title={`${postPagination.current}(${page.currentPage})`}
                    >
                      {typeof page.currentPage === "number" && page.currentPage > 0 ? page.currentPage : "1"}
                    </a>
                  </li>
                  {page.url.next !== "" && page.currentPage < page.lastPage ? (
                    <li class="pagination__menu_item">
                      <a
                        class="pagination__link"
                        href={page.url.next}
                        aria-label={`${postPagination.next}(${page.currentPage + 1})`}
                        title={postPagination.next}
                      >
                        &rarr;
                      </a>
                    </li>
                  ) : (
                    <li class="pagination__menu_item">
                      <span class="pagination__link_empty" />
                    </li>
                  )}
                  {page.url.last !== "" && page.currentPage !== page.lastPage ? (
                    <li class="pagination__menu_item">
                      <a
                        class="pagination__link_current"
                        href={page.url.last}
                        aria-label={`${postPagination.last}(${page.lastPage})`}
                        title={`${postPagination.last}(${page.lastPage})`}
                      >
                        {page.lastPage}
                      </a>
                    </li>
                  ) : (
                    <li class="pagination__menu_item">
                      <span class="pagination__link_empty" />
                    </li>
                  )}
                </ul>
              )
            }
          </div>
        </div>
        <!-- </div> -->
      </div>
      <Footer />
    </main>
  </div>
</Layout>

<style>
  .blog__wrapper {
    width: 700px;
    max-width: calc(100% - 2rem);
    margin-inline: auto;
  }

  .blog__title {
    font-size: 2rem;
    text-align: center;
    padding-inline: 1rem;
  }
  .blog__text {
    font-size: 1rem;
    line-height: 1.8;
    letter-spacing: 0.2em;
    color: inherit;
    text-align: center;
    padding-inline: 1rem;
  }
  .blog__menu {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    /* grid-template-columns: repeat(auto-fill, minmax(20ch, 1fr)); */
    gap: 1.5rem;
    color: white;
    list-style: none;
    margin-block-start: 3rem;
    padding-inline-start: 0;
  }

  .blog__menu_item {
    display: flex;
    flex-direction: column;
    height: 100%;
    color: rebeccapurple;
    background-color: darkgray;
    background-color: aliceblue;
    border: 1px solid rebeccapurple;
    border: none;
    box-shadow: 0 0 8px rgba(0 0 0 / 0.6);
    border-radius: 1rem;
    overflow: hidden;
    position: relative;
    padding-block: 1rem;
    padding-inline: 1rem;
    transition: all 0.4s ease;
  }
  .blog__menu_item:is(:hover, :focus-visible) {
    border: transparent 1px solid;
    box-shadow: 0 10px 10px rgba(0 0 0 / 0.6);
  }

  .blog__menu_article {
    display: flex;
    flex-direction: column;
    height: 100%;
    text-decoration: none;
  }

  .blog__menu_link {
    text-decoration: none;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .blog__thumbnail {
    width: 100%;
    overflow: hidden;
    position: relative;
  }

  .blog__thumbnail {
    aspect-ratio: 2 / 1;
    overflow: hidden;
  }

  .blog__menu_image {
    width: 100%;
    height: auto;
    flex-shrink: 0;
    box-shadow: 0 6px 10px rgba(0 0 0 / 0.6);
    object-fit: contain;
    overflow: hidden;
    transition: transform 0.5s ease;
    margin-block-start: 1rem;
    padding-inline: 0.25rem;
  }

  .blog__menu_image:is(:hover, :focus-visible) {
    transform: scale(1.2);
  }

  .blog__contents {
    flex: 1;
    display: flex;
    flex-direction: column;
    transition: opacity 0.25s;
  }

  .blog__contents:is(:hover, :focus-visible) {
    opacity: 0.5;
  }

  .blog__header {
    font-size: 1.125rem;
    font-size: 1rem;
    letter-spacing: 0.02em;
    color: inherit;
    text-align: justify;
    overflow: hidden;
    margin-block-start: 1rem;
    flex: 1;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    line-height: 1.4;
  }
  .blog__footer {
    display: flex;
    align-items: center;
    flex-wrap: nowrap;
    margin-block-start: 1rem;
    margin-top: auto;
    padding-top: 1rem;
  }

  .blog__times {
    display: flex;
    align-items: center;
  }

  .blog__dateTime {
    font-size: 0.75rem;
    color: inherit;
    align-self: flex-end;
    margin-inline-start: 0.25rem;
  }

  .blog__category {
    overflow: hidden;
    margin-inline-start: 0.5rem;
  }

  .category__link {
    display: flex;
    align-items: center;
    font-size: 0.75rem;
    color: inherit;
    text-decoration: none;
    margin-inline-start: 0.5rem;
  }

  .category__link_span {
    font-size: 0.75rem;
    color: inherit;
    align-self: flex-start;
    margin-block-start: 0.25rem;
  }
  ul.footer__contactMenu {
    padding-inline-start: 0;
  }
</style>

<script>
  import { setupFlowingLinesAnimation } from "../../scripts/flowingLines";
  setupFlowingLinesAnimation();
</script>
