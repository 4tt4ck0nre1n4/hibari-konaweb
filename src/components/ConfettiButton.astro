---
import { Icon } from "astro-icon/components";

const confetti = {
  ariaLabel: "confettiの操作ボタン",
  ariaTitle: "confettiの操作ボタン",
  width: "50",
  height: "50",
};
const confettiIcon = "fluent-emoji:wrapped-gift";
---

<button id="confettiButton" type="button" aria-label={confetti.ariaLabel} title={confetti.ariaTitle}>
  <Icon
    class="onConfettiIcon"
    name={confettiIcon}
    width={confetti.width}
    height={confetti.height}
    aria-hidden="true"
    role="presentation"
  />
</button>

<style>
  #confettiButton {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: transparent;
    border: transparent 1px solid;
    border-radius: 1rem;
    box-shadow: 0 8px 16px rgba(0 0 0 / 0.6);
    position: relative;
    z-index: 10;
    width: 100%;
    height: 100%;
    min-height: 60px;
    transition:
      transform 0.1s ease,
      box-shadow 0.4s ease;
  }
  #confettiButton:is(:hover, :focus-visible) {
    box-shadow: 0 16px 8px rgba(0 0 0 / 0.6);
  }
  #confettiButton:active {
    transform: scale(0.8);
    box-shadow: 0 4px 8px rgba(0 0 0 / 0.4);
  }
  .onConfettiIcon {
    width: 50px;
    height: 50px;
    display: inline-flex;
    filter: drop-shadow(10px 16px 20px rgba(160 160 160 / 0.7));
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.35s ease;
  }
  .onConfettiIcon.js-turnIcon {
    animation: spin 3s ease;
    transition: none;
  }
  @keyframes spin {
    0% {
      transform: translate(-50%, -50%) rotateY(0turn);
    }
    100% {
      transform: translate(-50%, -50%) rotateY(3turn);
    }
  }
  .onConfettiIcon:is(:hover, :focus-visible) {
    transform: translate(-50%, -50%) scale(1.1);
  }
  /* アニメーション中はホバー効果を無効化 */
  .onConfettiIcon.js-turnIcon:is(:hover, :focus-visible) {
    transform: translate(-50%, -50%) rotateY(3turn);
  }
  @media screen and (max-width: 480px) {
    .onConfettiIcon {
      transform: translate(-50%, -50%);
      margin-block-start: 0;
      margin-inline-start: 0;
    }
    .onConfettiIcon:is(:hover, :focus-visible) {
      transform: translate(-50%, -50%) scale(1.1);
    }
    /* アニメーション中はホバー効果を無効化 */
    .onConfettiIcon.js-turnIcon:is(:hover, :focus-visible) {
      transform: translate(-50%, -50%) rotateY(3turn);
    }
    .onConfettiIcon.js-turnIcon {
      animation: spinMobile 3s ease;
    }
    @keyframes spinMobile {
      0% {
        transform: translate(-50%, -50%) rotateY(0turn);
      }
      100% {
        transform: translate(-50%, -50%) rotateY(3turn);
      }
    }
  }
</style>

<script>
  const turnConfettiIcon = () => {
    const confettiIcon = document.querySelector(".onConfettiIcon") as HTMLElement | null;
    if (!confettiIcon) return;

    // アニメーション開始前に基本位置を確実に設定
    confettiIcon.style.transform = "translate(-50%, -50%)";
    confettiIcon.classList.remove("js-turnIcon");
    
    // 強制的にリフローを発生させてスタイルを適用
    void confettiIcon.offsetWidth;
    
    confettiIcon.classList.add("js-turnIcon");

    setTimeout(() => {
      confettiIcon.classList.remove("js-turnIcon");
      // アニメーション終了後に確実に基本位置に戻す
      confettiIcon.style.transform = "translate(-50%, -50%)";
      // スタイルを強制的に適用
      void confettiIcon.offsetWidth;
    }, 3000);
  };

  let lastTurnedSecond: number | null = null;

  const turnConfettiIconTimeInterval = () => {
    setInterval(() => {
      const now = new Date();
      const seconds = now.getSeconds();

      if ((seconds === 0 || seconds === 30) && seconds !== lastTurnedSecond) {
        turnConfettiIcon();
        lastTurnedSecond = seconds;
      } else if (seconds !== 0 && seconds !== 30) {
        lastTurnedSecond = null;
      }
    }, 1000);
  };

  window.addEventListener("load", () => {
    turnConfettiIconTimeInterval();
  });
</script>
