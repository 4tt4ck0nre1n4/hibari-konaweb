---
import RiveComponent from "./RiveComponent.tsx";

interface CardProps {
  href: string;
  ariaLabel: string;
  ariaTitle: string;
  cardTitle: string;
  cardBody: string;
  cardDetails: string;
  serviceMenu?: Array<{ item: string }>;
  src: string;
  stateMachines?: string | string[];
}

const { href, ariaLabel, ariaTitle, cardTitle, cardBody, cardDetails, serviceMenu, src, stateMachines } =
  Astro.props as CardProps;
---

<li class="card__item">
  <article class="card__article">
    <div class="card__flip-container">
      <!-- 表面 -->
      <div class="card__front">
        <a class="card__item_link" href={href} aria-label={ariaLabel} title={ariaTitle}>
          <h2 class="card__item_header">
            {cardTitle}
          </h2>
          <p class="card__item_body">
            {cardBody}
          </p>
          <div class="card__item_image">
            <RiveComponent src={src} stateMachines={stateMachines} minWidth={300} minHeight={200} client:only="react" />
          </div>
          <button class="card__flip_arrow" type="button" aria-label="詳細を見る" title="詳細を見る">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M5 12h14"></path>
              <path d="M12 5l7 7-7 7"></path>
            </svg>
          </button>
        </a>
      </div>

      <!-- 裏面 -->
      <div class="card__back">
        <div class="card__back_content">
          <h2 class="card__back_header">
            {cardTitle}
          </h2>
          <ul class="card__back_details">
            {
              Array.isArray(serviceMenu) ? (
                serviceMenu.map((menuItem: { item: string }) => (
                  <li class="card__back_details_item">{menuItem.item}</li>
                ))
              ) : typeof cardDetails === "string" ? (
                <li class="card__back_details_item">{cardDetails}</li>
              ) : null
            }
          </ul>
          <!-- <p class="card__back_body">
          {cardDetails}
        </p> -->
          <!-- <div class="card__back_details">
          <p>詳細情報がここに表示されます</p>
          <p>カードの裏面です</p>
        </div> -->
          <button class="card__flip_back" type="button">&larr;</button>
        </div>
        <!-- 裏面全体をクリック可能にするためのオーバーレイ -->
        <div class="card__back_overlay"></div>
      </div>
    </div>
  </article>
</li>

<style>
  .card__item {
    display: flex;
    border-radius: 0.5rem;
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    box-shadow: 0 0 8px rgba(0 0 0 / 0.6);
    background-image: none;
    background-size: 500%;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    padding: 1px;
    perspective: 1000px;
    min-height: 500px;
    height: 100%;
  }

  .card__flip-container {
    position: relative;
    width: 100%;
    height: 100%;
    min-height: 500px;
    transform-style: preserve-3d;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    /* iOS Safari対応: ハードウェアアクセラレーション */
    -webkit-transform-style: preserve-3d;
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
  }

  .card__flip-container.flipped {
    transform: rotateY(180deg);
  }

  .card__front,
  .card__back {
    position: absolute;
    width: 100%;
    height: 100%;
    min-height: 500px;
    backface-visibility: hidden;
    border-radius: 8px;
    /* iOS Safari対応: 3D変換の最適化 */
    -webkit-backface-visibility: hidden;
    -webkit-transform-style: preserve-3d;
    transform-style: preserve-3d;
  }

  /* 表面のスタイル（常に前面に表示） */
  .card__front {
    z-index: 2;
    /* タッチ操作を確実にする */
    cursor: pointer;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
  }

  /* 裏面のスタイル */
  .card__back {
    transform: rotateY(180deg);
    /* iOS Safari対応: 裏面の表示を確実に隠す */
    -webkit-transform: rotateY(180deg);
    z-index: 1;
    /* タッチ操作を確実にする */
    cursor: pointer;
    pointer-events: auto;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
  }

  /* フリップ時のz-index調整 */
  .card__flip-container.flipped .card__front {
    z-index: 1;
  }

  .card__flip-container.flipped .card__back {
    z-index: 2;
  }

  /* モバイルデバイス用のシンプルなアプローチ */
  @media screen and (max-width: 768px) {
    .card__flip-container {
      transform-style: preserve-3d;
      -webkit-transform-style: preserve-3d;
    }

    .card__front,
    .card__back {
      backface-visibility: hidden;
      -webkit-backface-visibility: hidden;
      transform-style: preserve-3d;
      -webkit-transform-style: preserve-3d;
      /* iPhoneでの重複表示を防ぐため、より強力な設定 */
      isolation: isolate;
      -webkit-isolation: isolate;
    }

    .card__back {
      transform: rotateY(180deg);
      -webkit-transform: rotateY(180deg);
    }

    .card__flip-container.flipped {
      transform: rotateY(180deg);
      -webkit-transform: rotateY(180deg);
    }

    /* iPhone Safari専用の追加修正 */
    @supports (-webkit-touch-callout: none) {
      .card__front,
      .card__back {
        backface-visibility: hidden !important;
        -webkit-backface-visibility: hidden !important;
        transform-style: preserve-3d !important;
        -webkit-transform-style: preserve-3d !important;
        /* より強力な重複防止 */
        contain: layout style paint;
        -webkit-contain: layout style paint;
      }

      /* 表面と裏面のz-indexを確実に設定 */
      .card__front {
        z-index: 2 !important;
      }

      .card__back {
        z-index: 1 !important;
      }

      .card__flip-container.flipped .card__front {
        z-index: 1 !important;
      }

      .card__flip-container.flipped .card__back {
        z-index: 2 !important;
      }
    }
  }
  .card__item_link {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    line-height: 1.6;
    color: inherit;
    background-color: #232323;
    background-color: transparent;
    /* background-color: #23262d; */
    text-decoration: none;
    border-radius: 8px;
    opacity: 0.8;
    padding: calc(1.5rem - 1px);
    overflow: hidden;
  }
  .card__article {
    width: 100%;
    height: 100%;
  }

  .card__item_header {
    font-size: 1.125rem;
    border-bottom: rebeccapurple 1px solid;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    margin: 0;
    text-align: center;
  }

  .card__flip_arrow {
    min-width: 120px;
    background: linear-gradient(135deg, rgb(102, 51, 153) 0%, rgb(120, 70, 180) 100%);
    color: white;
    border: none;
    border-radius: 0.5rem;
    margin-block-start: 1rem;
    padding: 0.5rem 1rem;
    font-size: 1rem;
    font-weight: bold;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(102, 51, 153, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    cursor: pointer;
  }

  .card__flip_arrow:hover {
    background: linear-gradient(135deg, rgb(120, 70, 180) 0%, rgb(102, 51, 153) 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(102, 51, 153, 0.4);
  }

  .card__flip_arrow:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(102, 51, 153, 0.3);
  }

  .card__flip_arrow svg {
    width: 16px;
    height: 16px;
    transition: transform 0.3s ease;
  }

  .card__flip_arrow:hover svg {
    transform: translateX(2px);
  }
  .card__item_body {
    font-size: 0.9375rem;
    line-height: 1.8;
    letter-spacing: 0.04em;
    text-align: justify;
    margin-block: 1rem;
    flex-grow: 1;
    display: flex;
    align-items: center;
  }
  .card__item:is(:hover, :focus-visible) {
    background-color: transparent;
    box-shadow: 0 10px 10px rgba(0 0 0 / 0.6);
    background-position: 0;
    background-image: linear-gradient(
      45deg,
      rgba(238, 161, 255, 1),
      #ffffff71,
      rgba(147, 183, 255, 1),
      #ffffff71,
      rgba(170, 244, 254, 1)
    );
  }
  html.dark .card__item {
    box-shadow: 0 4px 8px rgba(255 255 255 / 0.6);
  }
  html.dark .card__item:is(:hover, :focus-visible) {
    box-shadow: 0 10px 10px rgba(0 0 0 / 0.6);
    background-position: 0;
    background-image: linear-gradient(45deg, #ffffff71, transparent, #ffffff71, transparent, #ffffff71);
  }

  html.dark .card__flip_arrow {
    background: linear-gradient(135deg, #a855f7 0%, #9333ea 100%);
    box-shadow: 0 4px 12px rgba(168, 85, 247, 0.3);
  }

  html.dark .card__flip_arrow:hover {
    background: linear-gradient(135deg, #9333ea 0%, #a855f7 100%);
    box-shadow: 0 6px 16px rgba(168, 85, 247, 0.4);
  }
  .card__item:is(:hover, :focus-visible) .card__item_header {
    color: rgb(var(--accent-light));
    color: rebeccapurple;
  }
  .card__item_image {
    width: 100%;
    max-width: 300px;
    height: auto;
    max-height: 200px;
    object-fit: contain;
    margin-block-start: auto;
    flex-shrink: 0;
  }

  .rive-container {
    width: 100%;
    max-width: 300px;
    height: auto;
    max-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .rive-component {
    width: 100%;
    height: 100%;
    max-height: 200px;
  }

  .rive-component canvas {
    width: 100% !important;
    height: 100% !important;
    max-height: 200px !important;
    max-width: 300px !important;
    object-fit: contain !important;
    display: block;
  }

  .rive-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    max-width: 300px;
    height: auto;
    max-height: 200px;
    min-height: 150px;
  }

  .rive-loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid rebeccapurple;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* 裏面のスタイリング */
  .card__back_content {
    width: 100%;
    height: 100%;
    min-height: 500px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    background: linear-gradient(135deg, rgba(102, 51, 153, 0.1) 0%, rgba(102, 51, 153, 0.05) 100%);
    border: 1px solid rgba(102, 51, 153, 0.2);
    border-radius: 0.5rem;
    position: relative;
    overflow: hidden;
    padding-block: 1rem;
    padding-inline: 0.5rem;
  }

  .card__back_content::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 30%, rgba(102, 51, 153, 0.03) 50%, transparent 70%);
    pointer-events: none;
  }

  .card__back_header {
    font-size: 1.125rem;
    font-weight: bold;
    /* color: rgb(102, 51, 153); */
    text-align: center;

    border-bottom: 2px solid rgba(102, 51, 153, 0.3);
    position: relative;
    z-index: 1;
    padding-block-end: 0.5rem;
  }

  .card__back_body {
    font-size: 0.9375rem;
    line-height: 1.6;
    letter-spacing: 0.02em;
    text-align: center;
    margin-bottom: 1.5rem;
    color: rgba(102, 51, 153, 0.8);
    flex-grow: 1;
    display: flex;
    align-items: center;
    position: relative;
    z-index: 1;
  }

  .card__back_details {
    width: 100%;
    max-width: 288px;

    padding-block-start: 1rem;
    position: relative;
    z-index: 1;
  }

  .card__back_details_item {
    font-size: 0.9375rem;
    line-height: 1.4;
    background: rgba(102, 51, 153, 0.08);
    color: rgb(102, 51, 153);
    margin-block-start: 0.5rem;
    padding: 0.5rem 0.75rem;
    border-radius: 0.5rem;
    border-left: 3px solid rgb(102, 51, 153);
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(102, 51, 153, 0.1);
  }

  .card__back_details_item:hover {
    background: rgba(102, 51, 153, 0.12);
    transform: translateX(2px);
    box-shadow: 0 4px 8px rgba(102, 51, 153, 0.15);
  }

  .card__back_details_item:last-child {
    margin-bottom: 0;
  }

  html.dark .card__back_details_item {
    color: #ffffff;
  }

  .card__back_details p {
    margin: 0;
    color: inherit;
  }

  .card__flip_back {
    min-width: 120px;
    background: linear-gradient(135deg, rgb(102, 51, 153) 0%, rgb(120, 70, 180) 100%);
    color: white;
    border: none;
    border-radius: 0.5rem;
    margin-block-start: 0.5rem;
    padding: 0.25rem 2rem;
    font-size: 1.25rem;
    font-weight: bold;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(102, 51, 153, 0.3);
    position: relative;
    z-index: 1;
  }

  .card__flip_back:hover {
    background: linear-gradient(135deg, rgb(120, 70, 180) 0%, rgb(102, 51, 153) 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(102, 51, 153, 0.4);
  }

  .card__flip_back:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(102, 51, 153, 0.3);
  }

  /* 裏面オーバーレイ（タッチ操作用） */
  .card__back_overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    z-index: 10;
    cursor: pointer;
    /* 透明だがタッチ可能 */
    background: transparent;
    /* タッチイベントを確実に有効にする */
    pointer-events: auto;
    /* iOS Safariでのタッチ最適化 */
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
    /* タッチ領域を拡大 */
    min-width: 44px;
    min-height: 44px;
  }

  /* モバイルデバイスでのオーバーレイ最適化 */
  @media screen and (max-width: 768px) {
    .card__back_overlay {
      /* タッチ操作を確実にする */
      touch-action: manipulation;
      pointer-events: auto;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      user-select: none;
    }
  }
</style>

<script>
  // @ts-nocheck
  import { gsap } from "gsap";

  // シンプルで確実なカードフリップ機能
  function initCardFlip() {
    const cards = document.querySelectorAll(".card__item");

    cards.forEach((card) => {
      const flipContainer = card.querySelector(".card__flip-container");
      const frontLink = card.querySelector(".card__front .card__item_link");
      const backButton = card.querySelector(".card__flip_back");
      const backOverlay = card.querySelector(".card__back_overlay");

      // シンプルな状態管理
      let isFlipped = false;
      let isAnimating = false;

      // フリップ実行関数
      const flipCard = (toFlipped: boolean) => {
        if (isAnimating || !flipContainer) return;

        // 既に目的の状態の場合は何もしない
        if (isFlipped === toFlipped) return;

        isAnimating = true;
        isFlipped = toFlipped;

        // アニメーション設定
        const duration = window.innerWidth <= 768 ? 0.3 : 0.4;

        gsap.to(flipContainer, {
          rotationY: toFlipped ? 180 : 0,
          duration: duration,
          ease: "power2.inOut",
          force3D: true,
          onComplete: () => {
            isAnimating = false;
          },
        });

        // クラス状態を更新
        if (toFlipped) {
          flipContainer.classList.add("flipped");
        } else {
          flipContainer.classList.remove("flipped");
        }
      };

      // 表面クリック処理
      const handleFrontClick = (e: Event) => {
        e.preventDefault();
        e.stopPropagation();
        flipCard(!isFlipped);
      };

      // 裏面クリック処理
      const handleBackClick = (e: Event) => {
        e.preventDefault();
        e.stopPropagation();
        flipCard(false);
      };

      // イベントリスナー設定（iPhone対応強化版）
      if (frontLink) {
        // タッチデバイス用（touchstart + touchend）
        frontLink.addEventListener(
          "touchstart",
          (e) => {
            e.preventDefault();
          },
          { passive: false }
        );

        frontLink.addEventListener("touchend", handleFrontClick, { passive: false });

        // マウス用
        frontLink.addEventListener("click", handleFrontClick);
      }

      if (backButton) {
        backButton.addEventListener(
          "touchstart",
          (e) => {
            e.preventDefault();
          },
          { passive: false }
        );

        backButton.addEventListener("touchend", handleBackClick, { passive: false });
        backButton.addEventListener("click", handleBackClick);
      }

      if (backOverlay) {
        backOverlay.addEventListener(
          "touchstart",
          (e) => {
            e.preventDefault();
          },
          { passive: false }
        );

        backOverlay.addEventListener("touchend", handleBackClick, { passive: false });
        backOverlay.addEventListener("click", handleBackClick);
      }
    });
  }

  // 初期化実行
  function initializeCardFlip() {
    const cards = document.querySelectorAll(".card__item");
    if (cards.length === 0) return;

    // 既に初期化済みの場合はスキップ
    const uninitializedCards = Array.from(cards).filter((card) => !card.hasAttribute("data-initialized"));
    if (uninitializedCards.length === 0) return;

    initCardFlip();

    // 初期化済みマークを追加
    cards.forEach((card) => {
      card.setAttribute("data-initialized", "true");
    });
  }

  // DOM読み込み完了後に初期化
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeCardFlip);
  } else {
    initializeCardFlip();
  }

  // Astroコンポーネント用の初期化
  if (typeof window !== "undefined") {
    setTimeout(initializeCardFlip, 100);
  }
</script>
