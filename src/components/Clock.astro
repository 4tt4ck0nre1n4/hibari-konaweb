---

---

<div id="js-clock__inner" class="clock__inner">
  <div class="clock">
    <time class="clock__date" datetime=""></time>
    <time class="clock__time" datetime=""></time>
  </div>
</div>

<style>
  #js-clock__inner {
    opacity: 1;
    transition: opacity 2s ease;
  }
  #js-clock__inner.is-notClock {
    opacity: 0;
  }
  .is-notClock {
    transition: opacity 2s ease;
  }
  .clock__inner {
    width: 100%;
    height: 14vh;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #232323;
    border-radius: 1rem;
    position: relative;
    z-index: 1;

    padding-block: 0.25rem;
  }
  .clock__inner::before {
    content: "";
    width: 90%;
    height: 14vh;
    position: absolute;
    z-index: -1;
    opacity: 0;
    transition: 0.3s;
    top: 0%;
    left: 5%;
    background: linear-gradient(90deg, transparent, aqua, transparent);
    transform: translateX(-160px) skew(-16deg);
    animation: none;
  }
  .clock__inner.js-shine::before {
    animation: shineClock 3s linear 1;
  }
  @keyframes shineClock {
    0% {
      transform: translateX(-160px) skew(-16deg);
      opacity: 0;
    }
    5% {
      opacity: 1;
    }
    25% {
      transform: translateX(160px) skew(-16deg);
      opacity: 0;
    }
    100% {
      transform: translateX(-160px) skew(-16deg);
      opacity: 0;
    }
  }
  .clock__inner:is(:hover, :focus-visible) {
    animation: pulsation 0.7s alternate infinite;
  }

  @keyframes pulsation {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(0.9);
    }
    100% {
      transform: scale(1.1);
    }
  }

  .clock {
    font-family: sans-serif;
    line-height: 1.2; /* 行間を少し詰める */
    color: aqua;
    text-shadow: 0px 0px 8px aqua;
    text-align: center;
    position: absolute;
    z-index: 1;
    width: 100%; /* 幅を100%に設定 */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 0.5rem; /* パディングを追加 */
    box-sizing: border-box; /* ボックスサイズを調整 */
  }
  .clock.js-color {
    color: whitesmoke;
    text-shadow: 0px 8px 16px rebeccapurple;
    transition:
      color 0.3s ease,
      text-shadow 0.3s ease;
  }
  .clock__date {
    font-size: 1.25rem;
    letter-spacing: 0.15em;
  }
  .clock__time {
    font-size: 2.25rem;
    letter-spacing: 0.05em;
  }
  @media screen and (max-width: 480px) {
    .clock__inner {
      height: 12vh; /* 高さを少し増やす */
      min-height: 80px; /* 最小高さを設定 */
    }
    .clock {
      padding: 0.25rem; /* モバイルではパディングを小さく */
      line-height: 1.1; /* 行間をさらに詰める */
    }
    .clock__date {
      font-size: 0.9rem; /* フォントサイズを小さく */
      letter-spacing: 0.1em; /* 文字間隔を調整 */
      margin-bottom: 0.1rem; /* 下マージンを小さく */
    }
    .clock__time {
      font-size: 1.5rem; /* 時間のフォントサイズを大幅に縮小 */
      letter-spacing: 0.03em; /* 文字間隔を調整 */
    }
  }

  /* iPhone特有の調整 */
  @media screen and (max-width: 480px) and (-webkit-min-device-pixel-ratio: 2) {
    .clock__inner {
      height: 14vh; /* iPhoneではさらに高さを増やす */
      min-height: 90px;
    }
    .clock__date {
      font-size: 0.85rem;
    }
    .clock__time {
      font-size: 1.4rem;
    }
  }
</style>

<script>
  const clock = () => {
    try {
      const d = new Date();

      let year: number | string = d.getFullYear();
      let month: number | string = (d.getMonth() + 1).toString().padStart(2, "0");
      let date: number | string = d.getDate().toString().padStart(2, "0");
      const weekday = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
      let day: string | undefined = weekday[d.getDay()];

      let hour: number | string = d.getHours().toString().padStart(2, "0");
      let minutes: number | string = d.getMinutes().toString().padStart(2, "0");
      let seconds: number | string = d.getSeconds().toString().padStart(2, "0");

      let today = `${year}/${month}/${date}/${day}`;
      let time = `${hour}:${minutes}:${seconds}`;
      let datetime = `${year}-${month}-${date}T${hour}:${minutes}:${seconds}Z`;

      const dateElement = document.querySelector(".clock__date");
      const timeElement = document.querySelector(".clock__time");

      if (dateElement) {
        dateElement.textContent = today;
        dateElement.setAttribute("datetime", `${year}-${month}-${date}`);
      }

      if (timeElement) {
        timeElement.textContent = time;
        timeElement.setAttribute("datetime", datetime);
      }
    } catch (error) {
      console.error("Clock error:", error);
    }
  };

  let lastShineSecond: number | null = null;

  const triggerShine = () => {
    const clockInner = document.getElementById("js-clock__inner");
    if (!clockInner) {
      return;
    }

    clockInner.classList.remove("js-shine");
    void clockInner.offsetWidth;
    clockInner.classList.add("js-shine");

    setTimeout(() => {
      clockInner.classList.remove("js-shine");
    }, 3000);
  };

  let clockInterval: ReturnType<typeof setInterval> | null = null;
  let shineInterval: ReturnType<typeof setInterval> | null = null;
  let colorInterval: ReturnType<typeof setInterval> | null = null;

  window.addEventListener("load", () => {
    clock();
    clockInterval = setInterval(clock, 1000);

    // シャイン効果のインターバル
    shineInterval = setInterval(() => {
      const now = new Date();
      const seconds = now.getSeconds();

      if ([0, 15, 30, 45].includes(seconds) && seconds !== lastShineSecond) {
        triggerShine();
        lastShineSecond = seconds;
      }
    }, 1000);

    // カラー効果のインターバル
    colorInterval = setInterval(() => {
      const now = new Date();
      const seconds = now.getSeconds();
      const colorTarget = document.querySelector(".clock") as HTMLElement;

      if (seconds % 15 === 0 && colorTarget) {
        colorTarget.classList.add("js-color");

        setTimeout(() => {
          colorTarget.classList.remove("js-color");
        }, 1000);
      }
    }, 1000);
  });

  // ページがアンロードされる時にインターバルをクリア
  window.addEventListener("beforeunload", () => {
    if (clockInterval) {
      clearInterval(clockInterval);
    }
    if (shineInterval) {
      clearInterval(shineInterval);
    }
    if (colorInterval) {
      clearInterval(colorInterval);
    }
  });
</script>
