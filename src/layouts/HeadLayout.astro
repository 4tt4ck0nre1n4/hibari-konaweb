---
import Favicon from "../components/Favicon.astro";
import "../styles/reset.css";
import "../styles/global.css";
import globalText from "../data/globalText.json";

interface Props {
  title: string;
  description: string;
  ogType: string;
  ogTitle: string;
  ogDescription: string;
  twitterTitle: string;
  twitterDescription: string;

  jsonLd?: string | undefined;
}

const { title, description, ogType, ogTitle, ogDescription, twitterTitle, twitterDescription, jsonLd } = Astro.props;
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self' 'wasm-unsafe-eval' 'unsafe-inline' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: blob: http://hibari-konaweb.local https://cdn.jsdelivr.net https://hibari-konaweb.com; font-src 'self' https://fonts.gstatic.com data:; connect-src 'self' blob: data: https://unpkg.com https://cdn.jsdelivr.net https://api.iconify.design https://hibari-konaweb.com; worker-src 'self' blob:; media-src 'self' blob:; object-src 'none';"
    />
    <title>{title}</title>
    <meta name="description" content={description} />
    <Favicon />
    <link rel="sitemap" href={globalText.link.sitemap} />
    <meta name="generator" content={Astro.generator} />
    <meta name="keywords" content={globalText.global.keywords} />
    <meta name="color-scheme" content={globalText.global.colorScheme} />
    <meta name="referrer" content={globalText.global.referrer} />
    <meta name="theme-color" content={globalText.global.themeColor} />
    <meta name="author" content={globalText.global.author} />
    <meta name="creator" content={globalText.global.creator} />
    <meta name="publisher" content={globalText.global.publisher} />
    <meta name="robots" content={globalText.global.robots} />
    <meta name="format-detection" content={globalText.global.formatDetection} />
    <link rel="canonical" href={globalText.link.canonical} />
    <link rel="author" href={globalText.link.author} />
    <meta name="application-name" content={globalText.global.applicationName} />
    <meta name="mobile-web-app-capable" content={globalText.global.mobileWebAppCapable} />
    <meta name="apple-mobile-web-app-title" content={globalText.global.appleMobileWebAppTitle} />
    <meta property="og:local" content={globalText.og.local} />
    <meta property="og:title" content={ogTitle} />
    <meta property="og:description" content={ogDescription} />
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={globalText.og.url} />
    <meta property="og:image" content={globalText.og.image} />
    <meta property="og:site_name" content={globalText.og.site_name} />
    <meta name="twitter:card" content={globalText.twitter.card} />
    <meta name="twitter:title" content={twitterTitle} />
    <meta name="twitter:description" content={twitterDescription} />
    <meta name="twitter:site" content={globalText.twitter.site} />
    <meta name="twitter:image" content={globalText.twitter.image} />
    {
      typeof jsonLd === "string" && jsonLd.trim() !== "" && (
        <script is:inline type="application/ld+json" set:html={jsonLd} />
      )
    }
    <!-- <link rel="preload" href="/wasm/rive.wasm" as="fetch" type="application/wasm" crossorigin="anonymous" /> -->

    <!-- CSSの遅延読み込み用スクリプト -->
    <script is:inline>
      // 遅延読み込み対象のCSSを非同期で読み込む
      (function () {
        const loadDeferredStyles = () => {
          const addStylesNode = document.getElementById("deferred-styles");
          if (addStylesNode) {
            const replacement = document.createElement("div");
            replacement.innerHTML = addStylesNode.textContent;
            document.body.appendChild(replacement);
            addStylesNode.parentElement.removeChild(addStylesNode);
          }
        };
        const raf =
          window.requestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          window.msRequestAnimationFrame;
        if (raf)
          raf(() => {
            window.setTimeout(loadDeferredStyles, 0);
          });
        else window.addEventListener("load", loadDeferredStyles);
      })();
    </script>
  </head>
</html>
